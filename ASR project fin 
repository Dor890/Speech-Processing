{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dor890/Speech-Processing/blob/master/ASR%20project%20fin%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install jiwer torch torchaudio comet_ml"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HKeW974s6HGG",
        "outputId": "ff51fa87-ec6e-427c-c2f6-475f037cb36d"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: jiwer in /usr/local/lib/python3.10/dist-packages (3.0.2)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.10/dist-packages (2.0.1+cu118)\n",
            "Requirement already satisfied: torchaudio in /usr/local/lib/python3.10/dist-packages (2.0.2+cu118)\n",
            "Requirement already satisfied: comet_ml in /usr/local/lib/python3.10/dist-packages (3.33.7)\n",
            "Requirement already satisfied: click<9.0.0,>=8.1.3 in /usr/local/lib/python3.10/dist-packages (from jiwer) (8.1.6)\n",
            "Requirement already satisfied: rapidfuzz==2.13.7 in /usr/local/lib/python3.10/dist-packages (from jiwer) (2.13.7)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from torch) (3.12.2)\n",
            "Requirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from torch) (4.7.1)\n",
            "Requirement already satisfied: sympy in /usr/local/lib/python3.10/dist-packages (from torch) (1.11.1)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from torch) (3.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.10/dist-packages (from torch) (3.1.2)\n",
            "Requirement already satisfied: triton==2.0.0 in /usr/local/lib/python3.10/dist-packages (from torch) (2.0.0)\n",
            "Requirement already satisfied: cmake in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch) (3.25.2)\n",
            "Requirement already satisfied: lit in /usr/local/lib/python3.10/dist-packages (from triton==2.0.0->torch) (16.0.6)\n",
            "Requirement already satisfied: jsonschema!=3.1.0,>=2.6.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (4.3.3)\n",
            "Requirement already satisfied: psutil>=5.6.3 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (5.9.5)\n",
            "Requirement already satisfied: python-box<7.0.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (6.1.0)\n",
            "Requirement already satisfied: requests-toolbelt>=0.8.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.0.0)\n",
            "Requirement already satisfied: requests>=2.18.4 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (2.27.1)\n",
            "Requirement already satisfied: semantic-version>=2.8.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (2.10.0)\n",
            "Requirement already satisfied: sentry-sdk>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.29.2)\n",
            "Requirement already satisfied: simplejson in /usr/local/lib/python3.10/dist-packages (from comet_ml) (3.19.1)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.16.0)\n",
            "Requirement already satisfied: urllib3>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.26.16)\n",
            "Requirement already satisfied: websocket-client<1.4.0,>=0.55.0 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.3.3)\n",
            "Requirement already satisfied: wrapt>=1.11.2 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (1.14.1)\n",
            "Requirement already satisfied: wurlitzer>=1.0.2 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (3.0.3)\n",
            "Requirement already satisfied: everett[ini]<3.2.0,>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (3.1.0)\n",
            "Requirement already satisfied: dulwich!=0.20.33,>=0.20.6 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (0.21.5)\n",
            "Requirement already satisfied: rich>=13.3.2 in /usr/local/lib/python3.10/dist-packages (from comet_ml) (13.4.2)\n",
            "Requirement already satisfied: configobj in /usr/local/lib/python3.10/dist-packages (from everett[ini]<3.2.0,>=1.0.1->comet_ml) (5.0.8)\n",
            "Requirement already satisfied: attrs>=17.4.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema!=3.1.0,>=2.6.0->comet_ml) (23.1.0)\n",
            "Requirement already satisfied: pyrsistent!=0.17.0,!=0.17.1,!=0.17.2,>=0.14.0 in /usr/local/lib/python3.10/dist-packages (from jsonschema!=3.1.0,>=2.6.0->comet_ml) (0.19.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->comet_ml) (2023.7.22)\n",
            "Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->comet_ml) (2.0.12)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.18.4->comet_ml) (3.4)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.3.2->comet_ml) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=13.3.2->comet_ml) (2.14.0)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2->torch) (2.1.3)\n",
            "Requirement already satisfied: mpmath>=0.19 in /usr/local/lib/python3.10/dist-packages (from sympy->torch) (1.3.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=13.3.2->comet_ml) (0.1.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torchaudio\n",
        "import torch.nn as nn\n",
        "from torch import optim\n",
        "import torch.nn.functional as F\n",
        "from torchaudio.models.decoder import ctc_decoder\n",
        "from torchaudio.models.decoder._ctc_decoder import download_pretrained_files\n",
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "from torch.utils.data import Dataset\n",
        "import random\n",
        "from jiwer import wer, cer\n",
        "from torch import nn\n",
        "from torch.utils.data import DataLoader\n",
        "from tqdm import tqdm\n",
        "from comet_ml import Experiment\n",
        "\n",
        "\n",
        "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
        "files = download_pretrained_files(\"librispeech-4-gram\")\n"
      ],
      "metadata": {
        "id": "wjFoB3526LH-"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive', force_remount=True)"
      ],
      "metadata": {
        "id": "ikPqDXlNckS6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1b1b62f-e4d9-460a-8811-dd54cba73f3b"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Numerical constants\n",
        "SR = 16000\n",
        "FILE_2CHECK = 13\n",
        "HOP_LEN = 160\n",
        "N_FFT = 400\n",
        "N_MELS = 128\n",
        "N_MFCC = 13\n",
        "N_EPOCHS = 50\n",
        "BATCH_SIZE = 16\n",
        "LEARNING_RATE = 5e-4\n",
        "WEIGHT_DECAY = 0.001\n",
        "N_CNN_LAYERS = 3\n",
        "N_RNN_LAYERS = 5\n",
        "RNN_DIM = 512\n",
        "STRIDE = 2\n",
        "HIDDEN_DIM = 256\n",
        "EMBED_DIM = 300\n",
        "NUM_CLASSES = 29\n",
        "DROPOUT = 0.1\n",
        "\n",
        "# Strings constants\n",
        "CTC_MODEL_PATH = '/content/drive/MyDrive/models/ctc_model.pth'\n",
        "LANG_MODEL_PATH = '/content/drive/MyDrive/models/lang_model.pth'\n",
        "DATA_PATH = '/content/drive/MyDrive/an4'\n",
        "\n",
        "LEXICON_PATH = '/content/drive/MyDrive/models/lexicon.txt'\n",
        "TOKENS_PATH = '/content/drive/MyDrive/models/tokens.txt'\n"
      ],
      "metadata": {
        "id": "r_nRg0LDLT0O"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Data:\n",
        "    def __init__(self):\n",
        "        print('Loading data...')\n",
        "        self.data_dir = 'an4'\n",
        "        self.x_train_paths, self.x_train, self.y_train = self.load_data('train')\n",
        "        self.x_val_paths, self.x_val, self.y_val = self.load_data('val')\n",
        "        self.x_test_paths, self.x_test, self.y_test = self.load_data('test')\n",
        "        print('Data loaded successfully')\n",
        "\n",
        "    def load_data(self, split):\n",
        "        \"\"\"\n",
        "        Load the data from the provided 'an4' folder, and split it into train, dev, and test sets.\n",
        "        \"\"\"\n",
        "        audio_dir = os.path.join(self.data_dir, split, 'an4', 'wav')\n",
        "        transcript_dir = os.path.join(self.data_dir, split, 'an4', 'txt')\n",
        "\n",
        "        audio_files = sorted(os.listdir(audio_dir))\n",
        "        transcript_files = sorted(os.listdir(transcript_dir))\n",
        "\n",
        "        audio_paths = [os.path.join(audio_dir, file) for file in audio_files]\n",
        "        transcript_paths = [os.path.join(transcript_dir, file) for file in\n",
        "                            transcript_files]\n",
        "\n",
        "        audios, transcripts = [], []\n",
        "\n",
        "        for audio_path, transcript_path in zip(audio_paths, transcript_paths):\n",
        "            with open(transcript_path, 'r') as f:\n",
        "                transcript = f.read().strip()\n",
        "                transcripts.append(transcript)\n",
        "\n",
        "        loaded_audios = [torchaudio.load(audio)[0] for audio in audio_paths]\n",
        "        return audio_paths, loaded_audios, transcripts\n",
        "\n",
        "    def get_data(self, split):\n",
        "        if split == 'train':\n",
        "            return self.x_train, self.y_train\n",
        "        elif split == 'val':\n",
        "            return self.x_val, self.y_val\n",
        "        elif split == 'test':\n",
        "            return self.x_test, self.y_test\n",
        "        else:\n",
        "            raise ValueError(f\"Invalid data split '{split}'\")\n",
        "\n",
        "    @staticmethod\n",
        "    def plot_waveform(waveform, sample_rate, title=\"Waveform\", xlim=None, ylim=None):\n",
        "        waveform = waveform.numpy()\n",
        "\n",
        "        num_channels, num_frames = waveform.shape\n",
        "        time_axis = torch.arange(0, num_frames) / sample_rate\n",
        "\n",
        "        figure, axes = plt.subplots(num_channels, 1)\n",
        "        if num_channels == 1:\n",
        "            axes = [axes]\n",
        "        for c in range(num_channels):\n",
        "            axes[c].plot(time_axis, waveform[c], linewidth=1)\n",
        "            axes[c].grid(True)\n",
        "            if num_channels > 1:\n",
        "                axes[c].set_ylabel(f'Channel {c + 1}')\n",
        "            if xlim:\n",
        "                axes[c].set_xlim(xlim)\n",
        "            if ylim:\n",
        "                axes[c].set_ylim(ylim)\n",
        "        figure.suptitle(title)\n",
        "        plt.show(block=False)\n",
        "\n",
        "    @staticmethod\n",
        "    def extract_mel_spec(waveform):\n",
        "        mel_specgram = torchaudio.transforms.MelSpectrogram(SR, n_mels=N_MELS)(waveform)\n",
        "        return mel_specgram\n",
        "\n",
        "    @staticmethod\n",
        "    def plot_mfcc(mfcc, title=\"MFCC\", xlim=None, ylim=None):\n",
        "        fig, ax = plt.subplots()\n",
        "        im = ax.imshow(mfcc, origin='lower', aspect='auto')\n",
        "        fig.colorbar(im, ax=ax)\n",
        "        ax.set(title=title, xlabel='Time', ylabel='MFCC')\n",
        "        if xlim:\n",
        "            ax.set_xlim(xlim)\n",
        "        if ylim:\n",
        "            ax.set_ylim(ylim)\n",
        "        plt.show(block=False)\n",
        "\n",
        "    @staticmethod\n",
        "    def plot_mel_spec(mel_spec, title=\"Mel Spectrogram\", xlim=None, ylim=None):\n",
        "        mel_spec = mel_spec.squeeze(0).numpy()\n",
        "        fig, ax = plt.subplots()\n",
        "        im = ax.imshow(mel_spec, origin='lower', aspect='auto')\n",
        "        fig.colorbar(im, ax=ax)\n",
        "        ax.set(title=title, xlabel='Time', ylabel='Frequency (Hz)')\n",
        "        if xlim:\n",
        "            ax.set_xlim(xlim)\n",
        "        if ylim:\n",
        "            ax.set_ylim(ylim)\n",
        "        plt.show(block=False)\n",
        "\n",
        "\n",
        "def test_distance_algorithms(data):\n",
        "    \"\"\"\n",
        "    Test the Distances algorithms (DTW & Euclidean) as the most naive\n",
        "    implementations.\n",
        "    \"\"\"\n",
        "    x_train, y_train = data.get_data('train')\n",
        "    x_val, y_val = data.get_data('val')\n",
        "    x_test, y_test = data.get_data('test')\n",
        "\n",
        "    dtw = DTWModel(x_train, y_train)\n",
        "    dtw.add_data(x_val, y_val)\n",
        "    predictions_dtw = dtw.classify_using_DTW_distance(x_test)\n",
        "    print('Predictions:')\n",
        "    print(predictions_dtw[:5])\n",
        "    print('True labels:')\n",
        "    print(y_test[:5])\n",
        "    print('Testing DTW algorithm...')\n",
        "    wer_error = wer(y_test, predictions_dtw)\n",
        "    cer_error = cer(y_test, predictions_dtw)\n",
        "    print(f'DTW Test WER: {wer_error:.4f}')\n",
        "    print(f'DTW Test CER: {cer_error:.4f}')\n",
        "    print('DTW tested successfully')\n"
      ],
      "metadata": {
        "id": "SxmtCmUegorM"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Decoders"
      ],
      "metadata": {
        "id": "3SV88qfigz8j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Decoders\n",
        "def greedy_decoder(output, labels, label_lengths,\n",
        "                   blank_label=28, collapse_repeated=True):\n",
        "    arg_maxes = torch.argmax(output, dim=2)\n",
        "    decodes = []\n",
        "    targets = []\n",
        "    text_transform = TextTransform()\n",
        "    for i, args in enumerate(arg_maxes):\n",
        "        decode = []\n",
        "        target = text_transform.int_to_text(labels[i][:label_lengths[i]].tolist())\n",
        "        targets.append(target)\n",
        "        for j, index in enumerate(args):\n",
        "            if index != blank_label:\n",
        "                if collapse_repeated and j != 0 and index == args[j -1]:\n",
        "                    continue\n",
        "                decode.append(index.item())\n",
        "        pred = text_transform.int_to_text(decode)\n",
        "        decodes.append(pred)\n",
        "        # print(f\"pred:{pred}, real: {target}\")\n",
        "\n",
        "    return decodes, targets\n",
        "\n",
        "\n",
        "def beam_decoder(output, labels, label_lengths, compare=True):\n",
        "    output = output.to('cpu')\n",
        "    beam_decoder = ctc_decoder(lexicon=LEXICON_PATH, tokens=TOKENS_PATH, lm=files.lm, blank_token='|',\n",
        "                               sil_token='SPACE', lm_weight=1, beam_size=100,\n",
        "                               word_score=-1)\n",
        "    beam_search_result = beam_decoder(output.contiguous())\n",
        "    text_transform = TextTransform()\n",
        "    preds, actuals = [], []\n",
        "    for i in range(output.shape[0]):\n",
        "        pred = \" \".join(beam_search_result[i][0].words).strip()\n",
        "        preds.append(pred)\n",
        "\n",
        "        if compare:\n",
        "          actual = text_transform.int_to_text(labels[i][:label_lengths[i]].tolist())\n",
        "          actuals.append(actual)\n",
        "\n",
        "    return preds, actuals\n",
        "\n"
      ],
      "metadata": {
        "id": "UNpfsbTt6Oi7"
      },
      "execution_count": 70,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Data processing"
      ],
      "metadata": {
        "id": "hRKPCpC8gyJL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class TextTransform:\n",
        "    def __init__(self):\n",
        "        char_map_str = \"\"\"\n",
        "            ' 0\n",
        "            SPACE 1\n",
        "            a 2\n",
        "            b 3\n",
        "            c 4\n",
        "            d 5\n",
        "            e 6\n",
        "            f 7\n",
        "            g 8\n",
        "            h 9\n",
        "            i 10\n",
        "            j 11\n",
        "            k 12\n",
        "            l 13\n",
        "            m 14\n",
        "            n 15\n",
        "            o 16\n",
        "            p 17\n",
        "            q 18\n",
        "            r 19\n",
        "            s 20\n",
        "            t 21\n",
        "            u 22\n",
        "            v 23\n",
        "            w 24\n",
        "            x 25\n",
        "            y 26\n",
        "            z 27\n",
        "            \"\"\"\n",
        "        self.char_map = {}\n",
        "        self.index_map = {}\n",
        "        for line in char_map_str.strip().split('\\n'):\n",
        "            ch, index = line.split()\n",
        "            self.char_map[ch] = int(index)\n",
        "            self.index_map[int(index)] = ch\n",
        "        self.index_map[1] = ' '\n",
        "\n",
        "    def text_to_int(self, text):\n",
        "        int_sequence = []\n",
        "        for c in text:\n",
        "            if c == ' ':\n",
        "                ch = self.char_map['SPACE']\n",
        "            else:\n",
        "                ch = self.char_map[c]\n",
        "            int_sequence.append(ch)\n",
        "        return int_sequence\n",
        "\n",
        "    def int_to_text(self, labels):\n",
        "        string = []\n",
        "        for i in labels:\n",
        "            string.append(self.index_map[i])\n",
        "        return ''.join(string).replace('SPACE', ' ')\n"
      ],
      "metadata": {
        "id": "Lo_obzPXLb8a"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "id": "n2ep0TP9KzRH"
      },
      "outputs": [],
      "source": [
        "# data loader\n",
        "\n",
        "class AN4Dataset(Dataset):\n",
        "    def __init__(self, split, transform=None, target_transform=None):\n",
        "        self.transform = transform\n",
        "        self.target_transform = target_transform\n",
        "\n",
        "        audio_dir = os.path.join(DATA_PATH, split, 'an4', 'wav')\n",
        "        transcript_dir = os.path.join(DATA_PATH, split, 'an4', 'txt')\n",
        "\n",
        "        audio_files = sorted(os.listdir(audio_dir))\n",
        "        transcript_files = sorted(os.listdir(transcript_dir))\n",
        "\n",
        "        audio_paths = [os.path.join(audio_dir, file) for file in audio_files if file.endswith('wav')]\n",
        "        transcript_paths = [os.path.join(transcript_dir, file) for file in\n",
        "                            transcript_files if file.endswith('txt')]\n",
        "\n",
        "        self.audios, self.transcripts = [], []\n",
        "\n",
        "        for audio_path, transcript_path in zip(audio_paths, transcript_paths):\n",
        "            with open(transcript_path, 'r') as f:\n",
        "                transcript = f.read().strip()\n",
        "                self.transcripts.append(transcript)\n",
        "\n",
        "        self.loaded_audios = [torchaudio.load(audio)[0] for audio in audio_paths]\n",
        "\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.loaded_audios)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        return self.loaded_audios[idx], self.transcripts[idx]\n",
        "\n",
        "\n",
        "def data_processing(data, data_type=\"train\"):\n",
        "    inputs, inputs_lengths, labels, labels_length = [], [], [], []\n",
        "\n",
        "    if data_type == \"train\":\n",
        "        transform = nn.Sequential(\n",
        "            torchaudio.transforms.MelSpectrogram(sample_rate=SR, n_mels=N_MELS),\n",
        "            torchaudio.transforms.FrequencyMasking(freq_mask_param=30),\n",
        "            torchaudio.transforms.TimeMasking(time_mask_param=100))\n",
        "    else:\n",
        "        transform = torchaudio.transforms.MelSpectrogram(sample_rate=SR, n_mels=N_MELS)\n",
        "\n",
        "    text_transform = TextTransform()\n",
        "    for (wav, transcript) in data:\n",
        "        spec = transform(wav).squeeze(0).transpose(0, 1)\n",
        "        inputs.append(spec)\n",
        "        inputs_lengths.append(spec.shape[0] // 2)\n",
        "        label = torch.Tensor(text_transform.text_to_int(str(transcript).lower()))\n",
        "        labels.append(label)\n",
        "        labels_length.append(len(label))\n",
        "\n",
        "    max_length = (max(inputs_lengths) * 2) + 1\n",
        "\n",
        "    # Pad tensors and create the big tensor\n",
        "    spectrograms = torch.zeros((len(inputs), max_length, N_MELS))\n",
        "    for i, tensor in enumerate(inputs):\n",
        "        spectrograms[i, :tensor.shape[0], :] = tensor[:, :]\n",
        "\n",
        "    spectrograms = spectrograms.unsqueeze(1).transpose(2, 3)\n",
        "    labels = nn.utils.rnn.pad_sequence(labels, batch_first=True)\n",
        "    return spectrograms, labels, inputs_lengths, labels_length\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Models"
      ],
      "metadata": {
        "id": "OOci_zcSgvXc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class BasicLSTMModel(nn.Module):\n",
        "\n",
        "    def __init__(self):\n",
        "        super(BasicLSTMModel, self).__init__()\n",
        "        self.rnn = nn.LSTM(input_size=N_MELS, hidden_size=HIDDEN_DIM,\n",
        "                           bidirectional=True, batch_first=True)\n",
        "\n",
        "        self.fc = nn.Linear(HIDDEN_DIM*2, NUM_CLASSES)\n",
        "\n",
        "    def forward(self, x):\n",
        "        sizes = x.size()\n",
        "        x = x.view(sizes[0], sizes[1] * sizes[2], sizes[3])  # (batch, feature, time)\n",
        "        x = x.transpose(1, 2)  # (batch, time, feature)\n",
        "        rnn_output, _ = self.rnn(x)\n",
        "        output = self.fc(rnn_output)\n",
        "\n",
        "        return output\n",
        "\n"
      ],
      "metadata": {
        "id": "mmBxwBRB5ZBl"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class AdvanceLSTMModel(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(AdvanceLSTMModel, self).__init__()\n",
        "        # self.vocabulary = vocabulary\n",
        "        # self.lang_model = lang_model\n",
        "\n",
        "        # RNN layers\n",
        "        self.rnn = nn.LSTM(input_size=512, hidden_size=128,\n",
        "                           num_layers=3, batch_first=True, bidirectional=True)\n",
        "\n",
        "        self.layer_norm1 = nn.LayerNorm(512)\n",
        "        self.layer_norm2 = nn.LayerNorm(256)\n",
        "        self.layer_norm3 = nn.LayerNorm(128)\n",
        "        self.layer_norm4 = nn.LayerNorm(5504)\n",
        "        self.dropout = nn.Dropout(0.15)\n",
        "\n",
        "        self.fc1 = nn.Linear(5504, 512)\n",
        "\n",
        "        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3)\n",
        "        self.conv2 = nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3)\n",
        "        self.conv3 = nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3)\n",
        "\n",
        "        # Fully connected layer\n",
        "        self.fc2 = nn.Linear(256, 128)\n",
        "        self.fc3 = nn.Linear(128, 29)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv1(x)\n",
        "        x = self.conv2(x)\n",
        "        sizes = x.size()\n",
        "        x = x.view(sizes[0], sizes[1] * sizes[2], sizes[3])  # (batch, feature, time)\n",
        "        x = x.transpose(1, 2)  # (batch, time, feature)\n",
        "        x = self.layer_norm4(x)\n",
        "        x = self.fc1(x)\n",
        "        x = self.dropout(x)\n",
        "        x = self.layer_norm1(x)\n",
        "        x, _ = self.rnn(x)\n",
        "        x = self.dropout(x)\n",
        "        x = self.layer_norm2(x)\n",
        "        x = self.fc2(x)\n",
        "        x = self.dropout(x)\n",
        "        x = self.layer_norm3(x)\n",
        "        output = self.fc3(x)\n",
        "\n",
        "        return output"
      ],
      "metadata": {
        "id": "6Pgyx-hLigqU"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class CNNLayerNorm(nn.Module):\n",
        "    \"\"\"Layer normalization built for cnns input\"\"\"\n",
        "\n",
        "    def __init__(self, n_feats):\n",
        "        super(CNNLayerNorm, self).__init__()\n",
        "        self.layer_norm = nn.LayerNorm(n_feats)\n",
        "\n",
        "    def forward(self, x):\n",
        "        # x (batch, channel, feature, time)\n",
        "        x = x.transpose(2, 3).contiguous()  # (batch, channel, time, feature)\n",
        "        x = self.layer_norm(x)\n",
        "        return x.transpose(2, 3).contiguous()  # (batch, channel, feature, time)\n",
        "\n",
        "\n",
        "class ResidualCNN(nn.Module):\n",
        "    def __init__(self, in_channels, out_channels, kernel, stride, dropout,\n",
        "                 n_feats):\n",
        "        super(ResidualCNN, self).__init__()\n",
        "\n",
        "        self.cnn1 = nn.Conv2d(in_channels, out_channels, kernel, stride,\n",
        "                              padding=kernel // 2)\n",
        "        self.cnn2 = nn.Conv2d(out_channels, out_channels, kernel, stride,\n",
        "                              padding=kernel // 2)\n",
        "        self.dropout1 = nn.Dropout(dropout)\n",
        "        self.dropout2 = nn.Dropout(dropout)\n",
        "        self.layer_norm1 = CNNLayerNorm(n_feats)\n",
        "        self.layer_norm2 = CNNLayerNorm(n_feats)\n",
        "\n",
        "    def forward(self, x):\n",
        "        residual = x  # (batch, channel, feature, time)\n",
        "        x = self.layer_norm1(x)\n",
        "        x = F.gelu(x)\n",
        "        x = self.dropout1(x)\n",
        "        x = self.cnn1(x)\n",
        "        x = self.layer_norm2(x)\n",
        "        x = F.gelu(x)\n",
        "        x = self.dropout2(x)\n",
        "        x = self.cnn2(x)\n",
        "        x += residual\n",
        "        return x  # (batch, channel, feature, time)\n",
        "\n",
        "\n",
        "class BidirectionalGRU(nn.Module):\n",
        "\n",
        "    def __init__(self, rnn_dim, hidden_size, dropout, batch_first):\n",
        "        super(BidirectionalGRU, self).__init__()\n",
        "\n",
        "        self.BiGRU = nn.GRU(\n",
        "            input_size=rnn_dim, hidden_size=hidden_size,\n",
        "            num_layers=1, batch_first=batch_first, bidirectional=True)\n",
        "        self.layer_norm = nn.LayerNorm(rnn_dim)\n",
        "        self.dropout = nn.Dropout(dropout)\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.layer_norm(x)\n",
        "        x = F.gelu(x)\n",
        "        x, _ = self.BiGRU(x)\n",
        "        x = self.dropout(x)\n",
        "        return x\n",
        "\n",
        "\n",
        "class FinalASRModel(nn.Module):\n",
        "    def __init__(self, n_cnn_layers, n_rnn_layers, rnn_dim,\n",
        "                 n_class, n_feats,\n",
        "                 stride=2, dropout=0.1):\n",
        "        super(FinalASRModel, self).__init__()\n",
        "        n_feats = n_feats // 2\n",
        "        self.cnn = nn.Conv2d(1, 32, 3, stride=stride,\n",
        "                             padding=3 // 2)  # cnn for extracting heirachal features\n",
        "\n",
        "        # n residual cnn layers with filter size of 32\n",
        "        self.rescnn_layers = nn.Sequential(*[\n",
        "            ResidualCNN(32, 32, kernel=3, stride=1, dropout=dropout,\n",
        "                        n_feats=n_feats)\n",
        "            for _ in range(n_cnn_layers)\n",
        "        ])\n",
        "        self.fully_connected = nn.Linear(n_feats * 32, rnn_dim)\n",
        "        self.birnn_layers = nn.Sequential(*[\n",
        "            BidirectionalGRU(rnn_dim=rnn_dim if i == 0 else rnn_dim * 2,\n",
        "                             hidden_size=rnn_dim, dropout=dropout, batch_first=i == 0)\n",
        "            for i in range(n_rnn_layers)\n",
        "        ])\n",
        "        self.classifier = nn.Sequential(\n",
        "            nn.Linear(rnn_dim * 2, rnn_dim),  # birnn returns rnn_dim*2\n",
        "            nn.GELU(),\n",
        "            nn.Dropout(dropout),\n",
        "            nn.Linear(rnn_dim, n_class)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.cnn(x)\n",
        "        x = self.rescnn_layers(x)\n",
        "        sizes = x.size()\n",
        "        x = x.view(sizes[0], sizes[1] * sizes[2], sizes[3])\n",
        "         # (batch, feature, time)\n",
        "        x = x.transpose(1, 2)  # (batch, time, feature)\n",
        "        x = self.fully_connected(x)\n",
        "        x = self.birnn_layers(x)\n",
        "        x = self.classifier(x)\n",
        "        return x\n",
        "\n"
      ],
      "metadata": {
        "id": "ceCaO2YleiRR"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train and test loops"
      ],
      "metadata": {
        "id": "PiTrhIVWyLYR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def save_model(model, path):\n",
        "    \"\"\"\n",
        "    Saves a pytorch models to the given path.\n",
        "    \"\"\"\n",
        "    torch.save(model.state_dict(), '{}'.format(path))\n",
        "\n",
        "\n",
        "def load_model(model, path):\n",
        "    \"\"\"\n",
        "    Loads a pytorch models from the given path. The models should already by\n",
        "    created (e.g. by calling the constructor) and should be passed as an argument.\n",
        "    \"\"\"\n",
        "    model.load_state_dict(torch.load('{}'.format(path)))\n",
        "\n",
        "\n",
        "\n",
        "def test(model, test_loader, criterion, experiment, counter=0, isEval=False,\n",
        "         decoder=greedy_decoder):\n",
        "    #print('evaluating...')\n",
        "    model.eval()\n",
        "    test_loss = 0\n",
        "    t_loss, test_cer, test_wer = [], [], []\n",
        "    with experiment.test():\n",
        "        with torch.no_grad():\n",
        "            for i, _data in enumerate(test_loader):\n",
        "                spectrograms, labels, input_lengths, label_lengths = _data\n",
        "                spectrograms, labels = spectrograms.to(device), labels.to(device)\n",
        "\n",
        "                output = model(spectrograms)  # (batch, time, n_class)\n",
        "                output = F.log_softmax(output, dim=2)\n",
        "                output = output.transpose(0, 1) # (time, batch, n_class)\n",
        "\n",
        "                loss = criterion(output, labels, input_lengths, label_lengths)\n",
        "                t_loss.append(loss.item())\n",
        "\n",
        "                decoded_preds, decoded_targets = decoder(output.transpose(0, 1), labels, label_lengths)\n",
        "                for j in range(len(decoded_preds)):\n",
        "                    test_cer.append(cer(decoded_targets[j], decoded_preds[j]))\n",
        "                    test_wer.append(wer(decoded_targets[j], decoded_preds[j]))\n",
        "        avg_cer = sum(test_cer)/len(test_cer)\n",
        "        avg_wer = sum(test_wer)/len(test_wer)\n",
        "        avg_loss = sum(t_loss)/len(t_loss)\n",
        "        if isEval:\n",
        "          experiment.log_metric('test_loss', avg_loss, step=counter)\n",
        "          experiment.log_metric('cer', avg_cer, step=counter)\n",
        "          experiment.log_metric('wer', avg_wer, step=counter)\n",
        "        else:\n",
        "          print('Test set: Average loss: {:.4f}, Average CER: {:4f} Average WER: {:.4f}\\n'.format(avg_loss, avg_cer, avg_wer))\n",
        "\n",
        "\n",
        "def train(model, train_loader, val_loader, criterion, experiment):\n",
        "    data_len = len(train_loader.dataset)\n",
        "    model.train()\n",
        "    optimizer = torch.optim.AdamW(model.parameters(), LEARNING_RATE)\n",
        "    scheduler = optim.lr_scheduler.OneCycleLR(optimizer, max_lr=LEARNING_RATE,\n",
        "                                            steps_per_epoch=int(len(train_loader)),\n",
        "                                            epochs=N_EPOCHS,\n",
        "                                            anneal_strategy='linear')\n",
        "    with experiment.train():\n",
        "      counter = 0\n",
        "      for epoch in range(N_EPOCHS):\n",
        "          model.train()\n",
        "          if (epoch + 1) % 10 == 0:\n",
        "              save_model(model, CTC_MODEL_PATH)\n",
        "\n",
        "          e_loss = 0\n",
        "          losses = []\n",
        "          for batch_idx, _data in enumerate(train_loader):\n",
        "              spectrograms, labels, input_lengths, label_lengths = _data\n",
        "              spectrograms, labels = spectrograms.to(device), labels.to(device)\n",
        "\n",
        "              optimizer.zero_grad()\n",
        "              output = model(spectrograms)  # (batch, time, n_class)\n",
        "              output = F.log_softmax(output, dim=2)\n",
        "              output = output.transpose(0, 1)  # (time, batch, n_class)\n",
        "\n",
        "              loss = criterion(output, labels, input_lengths, label_lengths)\n",
        "              loss.backward()\n",
        "\n",
        "              # log it\n",
        "              optimizer.step()\n",
        "              scheduler.step()\n",
        "              e_loss += loss.item()\n",
        "              losses.append(loss.item())\n",
        "\n",
        "          print(f\"Train Epoch: {epoch}, loss = {e_loss}\")\n",
        "          experiment.log_metric('loss', sum(losses)/len(losses), step=epoch+1)\n",
        "          experiment.log_metric('learning_rate', scheduler.get_last_lr(),\n",
        "                                step=epoch+1)\n",
        "\n",
        "          test(model, val_loader, criterion, experiment, epoch+1, True, decoder=beam_decoder)\n",
        "\n",
        "    save_model(model, CTC_MODEL_PATH)\n"
      ],
      "metadata": {
        "id": "8olxeA0FK4SA"
      },
      "execution_count": 88,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Telemtry init"
      ],
      "metadata": {
        "id": "qd3L6fpvyPSx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# setp up logging platform\n",
        "\n",
        "from datetime import datetime\n",
        "\n",
        "comet_api_key = \"P9a9lCzL9VwojP7DYNjYZLrdl\" # add your api key here\n",
        "project_name = \"67455 Introduction to Speech Processing - Final project\"\n",
        "experiment_name = f\"bigger_net_{datetime.now()}\"\n",
        "\n",
        "if comet_api_key:\n",
        "  experiment = Experiment(api_key=comet_api_key, project_name=project_name, parse_args=False)\n",
        "  experiment.set_name(experiment_name)\n",
        "  experiment.display()\n",
        "else:\n",
        "  experiment = Experiment(api_key='dummy_key', disabled=True)"
      ],
      "metadata": {
        "id": "8iptwPXo2QAg",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "7ae157b9-0b03-4324-cd2a-69233476ab5d"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[1;38;5;214mCOMET WARNING:\u001b[0m To get all data logged automatically, import comet_ml before the following modules: torch.\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m ---------------------------------------------------------------------------------------\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m Comet.ml Experiment Summary\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m ---------------------------------------------------------------------------------------\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m   Data:\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     display_summary_level : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     url                   : https://www.comet.com/roizhv22/67455-introduction-to-speech-processing-final-project/06231c0dcd6b49c3b6166f68a5065223\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m   Metrics [count] (min, max):\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     test_cer [20]            : (0.07872081672206017, 0.33727360110499)\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     test_test_loss [20]      : (0.2342191816618045, 0.45549495518207544)\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     test_wer [20]            : (0.16659661975451442, 0.5607152496626182)\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     train_learning_rate [20] : (-6.593730158730403e-07, 0.000499338626984127)\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     train_loss [20]          : (0.6055791140706451, 0.8354583222556997)\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m   Others:\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     Name : bigger_net_2023-08-01 15:45:20.057031\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m   Uploads:\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     environment details : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     filename            : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     installed packages  : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     notebook            : 2\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     os packages         : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m     source_code         : 1\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m \n",
            "\u001b[1;38;5;214mCOMET WARNING:\u001b[0m To get all data logged automatically, import comet_ml before the following modules: torch.\n",
            "\u001b[1;38;5;214mCOMET WARNING:\u001b[0m As you are running in a Jupyter environment, you will need to call `experiment.end()` when finished to ensure all metrics and code are logged before exiting.\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m Couldn't find a Git repository in '/content' nor in any parent directory. Set `COMET_GIT_DIRECTORY` if your Git Repository is elsewhere.\n",
            "\u001b[1;38;5;39mCOMET INFO:\u001b[0m Experiment is live on comet.com https://www.comet.com/roizhv22/67455-introduction-to-speech-processing-final-project/29f659b773e8465287162730e29a8347\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.lib.display.IFrame at 0x79e7d1c9c7c0>"
            ],
            "text/html": [
              "\n",
              "        <iframe\n",
              "            width=\"100%\"\n",
              "            height=\"800px\"\n",
              "            src=\"https://www.comet.com/roizhv22/67455-introduction-to-speech-processing-final-project/29f659b773e8465287162730e29a8347\"\n",
              "            frameborder=\"0\"\n",
              "            allowfullscreen\n",
              "            \n",
              "        ></iframe>\n",
              "        "
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "plotting"
      ],
      "metadata": {
        "id": "hmN-XsehyT-z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def parse_for_plot(dataset, model, num):\n",
        "    transform = torchaudio.transforms.MelSpectrogram(sample_rate=SR, n_mels=N_MELS)\n",
        "    for i in range(num):\n",
        "        sample, target = dataset.__getitem__(i)\n",
        "        spec = transform(sample).squeeze(0).transpose(0, 1)\n",
        "        spectrograms = torch.stack([spec], dim=0)\n",
        "        spectrograms = spectrograms.unsqueeze(1).transpose(2, 3)\n",
        "\n",
        "        model.eval()\n",
        "        spectrograms = spectrograms.to(device)\n",
        "        output = model(spectrograms)\n",
        "        output = output.to('cpu')\n",
        "        beam_decoder = ctc_decoder(lexicon=LEXICON_PATH, tokens=TOKENS_PATH,\n",
        "                                   lm=files.lm, blank_token='|',\n",
        "                                  sil_token='SPACE')\n",
        "        beam_search_result = beam_decoder(output.contiguous())\n",
        "        pred = \" \".join(beam_search_result[0][0].words).strip()\n",
        "        tokens = [c for c in pred]\n",
        "        tokens.insert(0, ' ')\n",
        "        tokens.append(' ')\n",
        "\n",
        "        plot_alignments(sample[0], output, tokens,\n",
        "                        beam_search_result[0][0].timesteps, SR)\n",
        "\n",
        "\n",
        "def plot_alignments(waveform, emission, tokens, timesteps, sample_rate):\n",
        "\n",
        "    t = torch.arange(waveform.size(0)) / sample_rate\n",
        "    ratio = waveform.size(0) / emission.size(1) / sample_rate\n",
        "\n",
        "    chars = []\n",
        "    words = []\n",
        "    word_start = None\n",
        "    for token, timestep in zip(tokens, timesteps * ratio):\n",
        "        if token == \" \":\n",
        "            if word_start is not None:\n",
        "                words.append((word_start, timestep))\n",
        "            word_start = None\n",
        "        else:\n",
        "            chars.append((token, timestep))\n",
        "            if word_start is None:\n",
        "                word_start = timestep\n",
        "\n",
        "    fig, axes = plt.subplots(1, 1)\n",
        "\n",
        "    def _plot(ax, xlim):\n",
        "        ax.plot(t, waveform)\n",
        "        for token, timestep in chars:\n",
        "            ax.annotate(token.upper(), (timestep, 0.4))\n",
        "        for word_start, word_end in words:\n",
        "            ax.axvspan(word_start, word_end, alpha=0.1, color=\"red\")\n",
        "        ax.set_ylim(-0.6, 0.7)\n",
        "        ax.set_yticks([0])\n",
        "        ax.grid(True, axis=\"y\")\n",
        "\n",
        "    _plot(axes, (0.0, (timesteps * ratio)[-1]+ 3/2))\n",
        "    axes.set_xlabel(\"Time (Sec)\")\n",
        "    fig.show()\n"
      ],
      "metadata": {
        "id": "LXrcbb72yVB7"
      },
      "execution_count": 110,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "driver"
      ],
      "metadata": {
        "id": "f2Vv25S7yWe0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def main():\n",
        "    print('--- Start running ---')\n",
        "    train_data_set = AN4Dataset('train')\n",
        "    val_data_set = AN4Dataset('val')\n",
        "    test_data_set = AN4Dataset('test')\n",
        "    train_loader = DataLoader(dataset=train_data_set,\n",
        "                              batch_size=BATCH_SIZE,\n",
        "                              shuffle=True,\n",
        "                              collate_fn=lambda x: data_processing(x, 'train'))\n",
        "    val_loader = DataLoader(dataset=val_data_set,\n",
        "                             batch_size=BATCH_SIZE,\n",
        "                             shuffle=False,\n",
        "                             collate_fn=lambda x: data_processing(x, 'val'))\n",
        "    test_loader = DataLoader(dataset=test_data_set,\n",
        "                             batch_size=BATCH_SIZE,\n",
        "                             shuffle=False,\n",
        "                             collate_fn=lambda x: data_processing(x, 'val'))\n",
        "\n",
        "    ctc_lstm = FinalASRModel(N_CNN_LAYERS, N_RNN_LAYERS, RNN_DIM, N_CLASSES,\n",
        "                             N_MELS, STRIDE,DROPOUT).to(device)\n",
        "\n",
        "    print('Num Model Parameters', sum([param.nelement() for\n",
        "                                       param in ctc_lstm.parameters()]))\n",
        "\n",
        "    lossFunc = nn.CTCLoss(blank=28, zero_infinity=True).to(device)\n",
        "    # load_model(ctc_lstm, CTC_MODEL_PATH)\n",
        "\n",
        "    # train(ctc_lstm, train_loader, val_loader, lossFunc, experiment)\n",
        "\n",
        "    # test(ctc_lstm, train_loader, lossFunc, experiment, decoder=beam_decoder)\n",
        "    # test(ctc_lstm, val_loader, lossFunc, experiment, decoder=beam_decoder)\n",
        "    # test(ctc_lstm, test_loader, lossFunc, experiment, decoder=beam_decoder)\n",
        "\n",
        "    # plot aligments from test\n",
        "    parse_for_plot(test_data_set, ctc_lstm, 10)\n",
        "    print('-- Finished running ---')\n",
        "\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "-vj7zzNxK-h-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "6149ba6b-1dce-4db0-c08a-5c0f318db730"
      },
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--- Start running ---\n",
            "Num Model Parameters 23705373\n",
            "-- Finished running ---\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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XFxcqfOyj644e9r5Qs7YR3tEsPDz81OnTp20dOnSwmkFBQVaunRpkSR2vu7duxeZX5KWLFlS4vyoWDtfKD8/X1u3blVMTIyjyqyWeD+7zpYtW3g/l8GyLE2cOFELFizQt99+qwYNGpS5DO9p+1WknS/klH20U7uKVsLs2bMtf39/a+bMmdaOHTusO+64w6pRo4aVnJxsWZZljR492nrggQcK51+zZo3l4+Nj/etf/7J27txpPfroo5avr6+1detWVz0Fj2BvOz/++OPW4sWLrcTERGvjxo3WyJEjrYCAAGv79u2uegoeIT093dq8ebO1efNmS5L1n//8x9q8ebN14MABy7Is64EHHrBGjx5dOP++ffusoKAg629/+5u1c+dOa9q0aZa3t7e1aNEiVz0Fj2BvO7/wwgvWJ598Yu3Zs8faunWr9Ze//MXy8vKyvvnmG1c9BY9w1113WeHh4dby5cutw4cPF/5kZmYWzsM+uvIq0s6u2Ed7TLCwLMt65ZVXrHr16ll+fn5W165dre+++67wsV69elljxowpMv/HH39sNW3a1PLz87NatWplffHFF06u2DPZ086TJ08unDc6Otq6+uqrrU2bNrmgas9y7rLGC3/Ote2YMWOsXr16XbRM+/btLT8/P6thw4bWO++84/S6PY297fzss89ajRo1sgICAqyIiAird+/e1rfffuua4j1IcW0sqch7lH105VWknV2xj+a26QAAwBiP6GMBAAA8A8ECAAAYQ7AAAADGECwAAIAxBAsAAGAMwQIAABhDsAAAAMYQLAAAgDEEC6AKu/XWWzVs2DCXbX/06NF6+umnnba9nJwcJSQkaMOGDU7bJoCiCBaAh7LZbKX+PPbYY3rppZc0c+ZMl9T3448/6ssvv9Tdd99dOC0pKUk33nijYmNjFRAQoLi4OA0dOlS7du0ysk0/Pz/dd999+vvf/25kfQDsx5DegIdKTk4u/H3OnDl65JFHtHv37sJpISEhCgkJcUVpkqRx48bJx8dHb7zxhiQpNzdXLVq0ULNmzfTwww8rJiZGv/76q7766isNHjxYl1xyiZHtnjx5UnXq1NGmTZvUqlUrI+sEUH4csQA8VJ06dQp/wsPDZbPZikwLCQm56FRI7969NWnSJE2ePFk1a9ZUdHS03n77bWVkZOi2225TaGioGjdurK+++qrItrZt26aBAwcqJCRE0dHRGj16tI4dO1Zibfn5+Zo3b56GDBlSOG379u1KTEzUa6+9pksuuUT169dXz5499dRTTxUJFQcPHtTw4cNVo0YNRUREaOjQodq/f3+R9c+YMUOtWrWSv7+/YmJiNHHixMLHatasqZ49e2r27NkVbFkAlUGwAKqZd999V5GRkVq/fr0mTZqku+66SzfccIN69OihTZs2qX///ho9erQyMzMlSadOndIVV1yhDh06aMOGDVq0aJGOHDmi4cOHl7iNn376SampqercuXPhtNq1a8vLy0vz5s1Tfn5+scvl5uZqwIABCg0N1apVq7RmzRqFhIToqquuUk5OjiTp9ddf14QJE3THHXdo69at+uyzz9S4ceMi6+natatWrVpV2aYCUBEOvXcqAKd45513rPDw8Iumjxkzxho6dGjh37169bIuvfTSwr/z8vKs4OBga/To0YXTDh8+bEmy1q1bZ1mWZT355JNW//79i6z34MGDliRr9+7dxdazYMECy9vb2yooKCgy/dVXX7WCgoKs0NBQq0+fPtYTTzxhJSYmFj7+/vvvW82aNSuyXHZ2thUYGGgtXrzYsizLio2NtR566KFS2+Oll16yEhISSp0HgGNwxAKoZtq2bVv4u7e3t2rVqqU2bdoUTouOjpYkpaSkSDrbCXPZsmWFfTZCQkLUvHlzSVJiYmKx2zhz5oz8/f1ls9mKTJ8wYYKSk5P14Ycfqnv37po7d65atWqlJUuWFG5r7969Cg0NLdxWRESEsrKylJiYqJSUFB06dEhXXnllqc8xMDCw8IgLAOfycXUBAJzL19e3yN82m63ItHNhoKCgQJJ0+vRpDRkyRM8+++xF64qJiSl2G5GRkcrMzFROTo78/PyKPBYaGqohQ4ZoyJAheuqppzRgwAA99dRT6tevn06fPq1OnTrpww8/vGid506llMeJEydUu3btcs0LwCyCBYBSdezYUfPnz1dCQoJ8fMq3y2jfvr0kaceOHYW/F8dms6l58+Zau3Zt4bbmzJmjqKgohYWFFbtMQkKCli5dqj59+pS43m3btqlDhw7lqhWAWZwKAVCqCRMm6MSJExo1apR++OEHJSYmavHixbrttttK7IRZu3ZtdezYUatXry6ctmXLFg0dOlTz5s3Tjh07tHfvXk2fPl0zZszQ0KFDJUk33XSTIiMjNXToUK1atUpJSUlavny57r77bv3666+SpMcee0z//ve/9fLLL2vPnj3atGmTXnnllSLbX7Vqlfr37++gFgFQGoIFgFLFxsZqzZo1ys/PV//+/dWmTRtNnjxZNWrUKPXUxLhx44qc0oiLi1NCQoIef/xxdevWTR07dtRLL72kxx9/XA899JAkKSgoSCtXrlS9evV07bXXqkWLFho7dqyysrIKj2CMGTNGL774ol577TW1atVKgwcP1p49ewq3s27dOqWmpur66693UIsAKA0DZAFwiDNnzqhZs2aaM2eOunfv7rTtjhgxQu3atdODDz7otG0C+ANHLAA4RGBgoN57771SB9IyLScnR23atNE999zjtG0CKIojFgAAwBiOWAAAAGMIFgAAwBiCBQAAMIZgAQAAjCFYAAAAYwgWAADAGIIFAAAwhmABAACMIVgAAABj/h/uaQeEt6TbIAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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KCoqyuiy6xp/2lbJv7aXbfVd/rS9bKvvsSxL2dnZatSokez2qntRuLXFwm63q0mTJi5dR1RUlE/v3NP507ZK/rW9bKvv8qftZVt9y7laKk6i8yYAADCGYAEAAIzxmWAREhKiJ554QiEhIZ4uxeX8aVsl/9pettV3+dP2sq3+za2dNwEAgG/zmRYLAADgeQQLAABgDMECAAAYQ7AAAADGeFWwmDBhglJSUhQaGqoePXpo+fLlVc4/ffp0tW3bVqGhoerUqZNmz57tpkprz5ltnTx5smw2W7l/oaGhbqy25hYtWqTBgwerUaNGstls+vjjj8/5nAULFqhr164KCQlRq1atNHnyZJfXaYqz27tgwYKz9q3NZlNGRoZ7Cq6hp59+WhdccIEiIyMVHx+voUOHavPmzed8nrceszXZXm89bt98802dd955ZQNC9erVS19++WWVz/HW/erstnrrPjXNa4LFtGnTdN999+mJJ57Q6tWr1blzZw0cOFAHDx6scP6lS5fq97//vW699VatWbNGQ4cO1dChQ7Vu3To3V+48Z7dVKh31bf/+/WX/du3a5caKay4nJ0edO3fWhAkTqjX/jh07NGjQIPXv319r167V2LFjddttt+nrr792caVmOLu9J23evLnc/o2Pj3dRhWYsXLhQo0aN0vfff6+5c+eqqKhIAwYMUE5OTqXP8eZjtibbK3nncdukSRM988wzWrVqlVauXKmLL75YQ4YM0fr16yuc35v3q7PbKnnnPjXO8hLdu3e3Ro0aVfZ3SUmJ1ahRI+vpp5+ucP7rr7/eGjRoULlpPXr0sO644w6X1mmCs9s6adIkKzo62k3VuY4ka9asWVXO8+CDD1odOnQoN23YsGHWwIEDXViZa1Rne+fPn29Jso4dO+aWmlzl4MGDliRr4cKFlc7jzcfsmaqzvb5y3FqWZTVo0MB69913K3zMl/arZVW9rb60T2vDK1osCgsLtWrVKl166aVl0+x2uy699FItW7aswucsW7as3PySNHDgwErnrytqsq2SdOLECTVr1kzJycnnTNTezFv3a22lpaUpKSlJl112mZYsWeLpcpyWmZkpSYqJial0Hl/at9XZXsn7j9uSkhJNnTpVOTk56tWrV4Xz+Mp+rc62St6/T03wimBx+PBhlZSUKCEhodz0hISESs81Z2RkODV/XVGTbU1NTdXEiRP1ySef6IMPPpDD4VDv3r21d+9ed5TsVpXt16ysLOXl5XmoKtdJSkrSW2+9pZkzZ2rmzJlKTk5Wv379tHr1ak+XVm0Oh0Njx45Vnz591LFjx0rn89Zj9kzV3V5vPm7T09MVERGhkJAQ3XnnnZo1a5bat29f4bzevl+d2VZv3qcmufXupnCNXr16lUvQvXv3Vrt27fT222/r73//uwcrQ22lpqYqNTW17O/evXtr27Zteumll/Sf//zHg5VV36hRo7Ru3TotXrzY06W4RXW315uP29TUVK1du1aZmZmaMWOGRowYoYULF1b6hevNnNlWb96nJnlFsIiLi1NAQIAOHDhQbvqBAweUmJhY4XMSExOdmr+uqMm2nikoKEhdunTR1q1bXVGiR1W2X6OiohQWFuahqtyre/fuXvMlPXr0aH3++edatGiRmjRpUuW83nrMns6Z7T2TNx23wcHBatWqlSSpW7duWrFihV555RW9/fbbZ83r7fvVmW09kzftU5O84lRIcHCwunXrpnnz5pVNczgcmjdvXqXnunr16lVufkmaO3dulefG6oKabOuZSkpKlJ6erqSkJFeV6THeul9NWrt2bZ3ft5ZlafTo0Zo1a5a+/fZbNW/e/JzP8eZ9W5PtPZM3H7cOh0MFBQUVPubN+7UiVW3rmbx5n9aKp3uPVtfUqVOtkJAQa/LkydaGDRus22+/3apfv76VkZFhWZZlDR8+3Bo3blzZ/EuWLLECAwOt559/3tq4caP1xBNPWEFBQVZ6erqnNqHanN3Wp556yvr666+tbdu2WatWrbJuuOEGKzQ01Fq/fr2nNqHasrOzrTVr1lhr1qyxJFkvvviitWbNGmvXrl2WZVnWuHHjrOHDh5fNv337dis8PNx64IEHrI0bN1oTJkywAgICrK+++spTm+AUZ7f3pZdesj7++GNry5YtVnp6unXPPfdYdrvd+uabbzy1CdVy1113WdHR0daCBQus/fv3l/3Lzc0tm8eXjtmabK+3Hrfjxo2zFi5caO3YscP66aefrHHjxlk2m82aM2eOZVm+tV+d3VZv3aemeU2wsCzLeu2116ymTZtawcHBVvfu3a3vv/++7LG+fftaI0aMKDf///73P6tNmzZWcHCw1aFDB+uLL75wc8U158y2jh07tmzehIQE64orrrBWr17tgaqdd/JyyjP/ndy+ESNGWH379j3rOWlpaVZwcLDVokULa9KkSW6vu6ac3d5nn33WatmypRUaGmrFxMRY/fr1s7799lvPFO+EirZRUrl95UvHbE2211uP21tuucVq1qyZFRwcbDVs2NC65JJLyr5oLcu39quz2+qt+9Q0bpsOAACM8Yo+FgAAwDsQLAAAgDEECwAAYAzBAgAAGEOwAAAAxhAsAACAMQQLAABgDMECAAAYQ7AAfNjNN9+soUOHemz9w4cP1z//+U+3ra+wsFApKSlauXKl29YJoDyCBeClbDZblf+efPJJvfLKK5o8ebJH6vvxxx81e/Zs3X333WXTduzYoRtvvFGNGjVSaGiomjRpoiFDhmjTpk1G1hkcHKy//OUv+utf/2pkeQCcx5DegJfKyMgo+/+0adP0+OOPa/PmzWXTIiIiFBER4YnSJEm33XabAgMD9dZbb0mSioqK1K5dO6Wmpuqxxx5TUlKS9u7dqy+//FJXXnmlevbsaWS9x44dU2JiolavXq0OHToYWSaA6qPFAvBSiYmJZf+io6Nls9nKTYuIiDjrVEi/fv00ZswYjR07Vg0aNFBCQoLeeecd5eTkaOTIkYqMjFSrVq305ZdfllvXunXr9Nvf/lYRERFKSEjQ8OHDdfjw4UprKykp0YwZMzR48OCyaevXr9e2bdv0xhtvqGfPnmrWrJn69Omj8ePHlwsVe/bs0fXXX6/69esrJiZGQ4YM0c6dO8stf+LEierQoYNCQkKUlJSk0aNHlz3WoEED9enTR1OnTq3hKwugNggWgJ+ZMmWK4uLitHz5co0ZM0Z33XWXrrvuOvXu3VurV6/WgAEDNHz4cOXm5kqSjh8/rosvvlhdunTRypUr9dVXX+nAgQO6/vrrK13HTz/9pMzMTJ1//vll0xo2bCi73a4ZM2aopKSkwucVFRVp4MCBioyM1HfffaclS5YoIiJCl19+uQoLCyVJb775pkaNGqXbb79d6enp+vTTT9WqVatyy+nevbu+++672r5UAGrCszdXBWDCpEmTrOjo6LOmjxgxwhoyZEjZ33379rV+85vflP1dXFxs1atXzxo+fHjZtP3791uSrGXLllmWZVl///vfrQEDBpRb7p49eyxJ1ubNmyusZ9asWVZAQIDlcDjKTX/99det8PBwKzIy0urfv7/1t7/9zdq2bVvZ4//5z3+s1NTUcs8rKCiwwsLCrK+//tqyLMtq1KiR9cgjj1T5erzyyitWSkpKlfMAcA1aLAA/c95555X9PyAgQLGxserUqVPZtISEBEnSwYMHJZV2wpw/f35Zn42IiAi1bdtWkrRt27YK15GXl6eQkBDZbLZy00eNGqWMjAx9+OGH6tWrl6ZPn64OHTpo7ty5ZevaunWrIiMjy9YVExOj/Px8bdu2TQcPHtS+fft0ySWXVLmNYWFhZS0uANwr0NMFAHCvoKCgcn/bbLZy006GAYfDIUk6ceKEBg8erGefffasZSUlJVW4jri4OOXm5qqwsFDBwcHlHouMjNTgwYM1ePBgjR8/XgMHDtT48eN12WWX6cSJE+rWrZs+/PDDs5Z58lRKdRw9elQNGzas1rwAzCJYAKhS165dNXPmTKWkpCgwsHofGWlpaZKkDRs2lP2/IjabTW3bttXSpUvL1jVt2jTFx8crKiqqwuekpKRo3rx56t+/f6XLXbdunbp06VKtWgGYxakQAFUaNWqUjh49qt///vdasWKFtm3bpq+//lojR46stBNmw4YN1bVrVy1evLhs2tq1azVkyBDNmDFDGzZs0NatW/Xee+9p4sSJGjJkiCTppptuUlxcnIYMGaLvvvtOO3bs0IIFC3T33Xdr7969kqQnn3xSL7zwgl599VVt2bJFq1ev1muvvVZu/d99950GDBjgolcEQFUIFgCq1KhRIy1ZskQlJSUaMGCAOnXqpLFjx6p+/fpVnpq47bbbyp3SaNKkiVJSUvTUU0+pR48e6tq1q1555RU99dRTeuSRRyRJ4eHhWrRokZo2baqrr75a7dq106233qr8/PyyFowRI0bo5Zdf1htvvKEOHTroyiuv1JYtW8rWs2zZMmVmZuraa6910SsCoCoMkAXAJfLy8pSamqpp06apV69eblvvsGHD1LlzZz388MNuWyeAU2ixAOASYWFhev/996scSMu0wsJCderUSffee6/b1gmgPFosAACAMbRYAAAAYwgWAADAGIIFAAAwhmABAACMIVgAAABjCBYAAMAYggUAADCGYAEAAIwhWAAAAGP+HxkpGRSWpr0zAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}